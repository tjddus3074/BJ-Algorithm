import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

public class Main {

	static int n, m, k;
	static boolean[] visit;

	static void Init() throws IOException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		int inven = Integer.parseInt(st.nextToken());
	
		int[][] arr = new int[n][m];
		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;
		int mintime = Integer.MAX_VALUE;
		int height = 0;
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				max = Math.max(max, arr[i][j]);
				min = Math.min(min, arr[i][j]);
			}
		}
		
		int[] alltime = new int[max+1];
		for(int h=min; h<=max; h++) {
			int need_block = 0;
			int time = 0;
			for(int i=0; i<n; i++) {
				for(int j=0; j<m; j++) {
					if(h<arr[i][j]) {
						need_block -= arr[i][j] -h;
						time += (arr[i][j] - h) * 2;
					}
					else if(h>arr[i][j]) {
						need_block += h - arr[i][j];
						time += (h - arr[i][j]);
					}
				}
			}
			
			if(inven - need_block < 0)
				continue;
			else {
				alltime[h] = time;
				mintime = Math.min(mintime, time);
			}
		}
		
		for(int i=min; i<=max; i++) {
			if(alltime[i] == mintime)
				height = i;
		}
		
		System.out.print(mintime + " " + height);
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}
}

import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node{
	int x;
	int y;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {
	static int n, m;
	static int[][] arr;
	static int count =0;
	static boolean[][] visit;
	static int[] dx = {-1, -1, -1, 0, 1, 1, 1, 0};
	static int[] dy = {-1, 0, 1, 1, 1, 0, -1, -1};

	static void Init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		while(true) {
			st = new StringTokenizer(br.readLine());
			m = Integer.parseInt(st.nextToken());
			n = Integer.parseInt(st.nextToken());
			if(n == 0 && m == 0)
				break;
			
			arr = new int[n][m];
			visit = new boolean[n][m];
			for(int i=0; i<n; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j=0; j<m; j++) 
					arr[i][j] = Integer.parseInt(st.nextToken());
			}
			count = 0;
			for(int i=0; i<n; i++) {
				for(int j=0; j<m; j++) {
					if(arr[i][j] == 1 && !visit[i][j]) {
						bfs(i, j);
						count ++;
					}
				}
			}
			
			System.out.println(count);
		}
	}
	
	static boolean isRange(int x,int y) {
		if(x < 0 || x>=n || y<0 || y>=m)
			return false;
		return true;
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y));
		visit[x][y] = true;
		
		while(!q.isEmpty()) {
			Node t = q.poll();
			for(int i=0; i<8; i++) {
				int nx = t.x + dx[i];
				int ny = t.y + dy[i];
				if(!isRange(nx, ny))
					continue;
				if(visit[nx][ny])
					continue;
				
				if(arr[nx][ny] == 1) {
					visit[nx][ny] = true;
					q.add(new Node(nx, ny));
				}
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}
}

import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node{
	int x;
	int y;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main{
	static int n, m;
	static int[][] arr;
	static int[][] dp;
	static int[] dx = {1, 0, 1};
	static int[] dy = {0, 1, 1};
	static int max = Integer.MIN_VALUE;
	
	static void Init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		arr = new int[n+1][m+1];
		dp = new int[n+1][m+1];
		
		for(int i=1; i<=n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1; j<=m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		dp[1][1] = arr[1][1];
		if(n == 1 && m == 1) {
			System.out.println(dp[1][1]);
			return;
		}
		if (n >= 2) {
			for (int i = 2; i <= n; i++)
				dp[i][1] = dp[i - 1][1] + arr[i][1];
			if(m == 1) {
				System.out.println(dp[n][1]);
				return;
			}
		}
		if (m >= 2) {
			for (int i = 2; i <= m; i++)
				dp[1][i] = dp[1][i - 1] + arr[1][i];
			if(n == 1) {
				System.out.println(dp[1][m]);
				return;
			}
		}
		
		for(int i=2; i<=n; i++) {
			for(int j=2; j<=m; j++) {
				int a= Math.max(dp[i-1][j], dp[i][j-1]);
				dp[i][j] = Math.max(a, dp[i-1][j-1]) + arr[i][j];
			}
		}
		
		
		System.out.println(dp[n][m]);
	}
	
	public static void main(String [] args) throws IOException {
		Init();
	}
}

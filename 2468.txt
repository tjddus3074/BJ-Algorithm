import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node{
	int x;
	int y;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main{
	static int n;
	static int[][] arr;
	static int mheight=0;
	static int max = Integer.MIN_VALUE;
	static boolean visit[][];
	static int[] dx = {-1, 1, 0, 0};
	static int[] dy = {0, 0, -1, 1};
	
	static void Init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		n = Integer.parseInt(br.readLine());
		
		arr = new int[n][n];
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				mheight = Math.max(mheight, arr[i][j]);
			}
		}
		
		int h = 0;
		while(h<mheight) {
			int count = 0;
			visit = new boolean[n][n];
			for(int i=0; i<n; i++) {
				for(int j=0; j<n; j++) {
					if(arr[i][j] <= h)
						visit[i][j] = true;		//true면 잠긴것
				}
			}
			
			for(int i=0; i<n; i++) {
				for(int j=0; j<n; j++) {
					if(visit[i][j] == false) {
						bfs(i, j);
						count++;
					}
				}
			}
			h++;
			max = Math.max(max, count);
		}
		
		System.out.println(max);
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		visit[x][y] = true;
		q.add(new Node(x, y));
		
		while(!q.isEmpty()) {
			Node t = q.poll();
			for(int i=0; i<4; i++) {
				int nx = t.x + dx[i];
				int ny = t.y + dy[i];
				
				if(!isRange(nx, ny))
					continue;
				if(visit[nx][ny])
					continue;
				
				visit[nx][ny] = true;
				q.add(new Node(nx, ny));
			}
		}
	}
	
	static boolean isRange(int x, int y) {
		if(x<0 || x>= n || y<0 || y>=n)
			return false;
		return true;
	}
	
	public static void main(String [] args) throws IOException {
		Init();
	}
}

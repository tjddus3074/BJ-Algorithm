import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

public class Main {

    static class Node implements Comparable<Node>{
        int num;
        double score;

        public Node(int num, double score){
            this.num = num;
            this.score = score;
        }

        @Override
        public int compareTo(Node o){
            if(this.score - o.score < 0)
                return 1;
            else
                return -1;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());

        PriorityQueue<Node> list = new PriorityQueue<>();

        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                int a = Integer.parseInt(st.nextToken());
                double b = Double.parseDouble(st.nextToken());
                list.add(new Node(a, b));
            }
        }


        int count = 0;
        double sum = 0;
        boolean[] visit = new boolean[n+1];
        int size = list.size();

        for(int i=0; i<size; i++){
            Node t = list.poll();
            if(visit[t.num])
                continue;
            else{
                visit[t.num] = true;
                count++;
                sum += t.score;
            }

            if(count == k)
                break;
        }
        System.out.println(String.format("%.1f", sum));
    }
}

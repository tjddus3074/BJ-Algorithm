package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node{
	int x;
	int y;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {

	static int n, m, k;
	static int[][] arr;
	static boolean[][] visit;
	static ArrayList<Node> list;
	static int[] dx= {0, 1, 0, -1};
	static int[] dy = {1, 0, -1, 0};
	static int movecount = 0;
	static int moveflag = 0;
	
	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		arr = new int[n][n];
		visit = new boolean[n][n];
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; j++)
				arr[i][j] = Integer.parseInt(st.nextToken());
		}
		
		while (true) {
			moveflag =0;
			visit = new boolean[n][n];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (visit[i][j] == false)
						bfs(i, j);
				}
			}
//			show();
			if(moveflag == 1)
				movecount++;
			if(moveflag == 0)
				break;
		}
		
		System.out.print(movecount);
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		list = new ArrayList<>();
		visit[x][y] = true;
		q.add(new Node(x, y));
		list.add(new Node(x, y));
		int sum = arr[x][y];
		int count = 1;
		
		while(!q.isEmpty()) {
			Node o = q.poll();
			for(int i=0; i<4; i++) {
				int nx= o.x + dx[i];
				int ny = o.y + dy[i];
				
				if(!isrange(nx, ny))
					continue;
				
				if(visit[nx][ny])
					continue;
				
				int num = Math.abs(arr[nx][ny] - arr[o.x][o.y]);
				if(num>=m && num<=k) {
					visit[nx][ny] = true;
					sum += arr[nx][ny];
					count++;
					q.add(new Node(nx, ny));
					list.add(new Node(nx, ny));
				}
			}
		}
		
		int score = sum/count;
		move(score);
	}
	
	static void move(int score) {
		if(list.size() == 1)
			return;
		
		moveflag = 1;
		for(int i=0; i<list.size(); i++) {
			Node o = list.get(i);
			arr[o.x][o.y]= score; 
		}
	}
	
	static boolean isrange(int x, int y) {
		if(x<0 || x>=n || y<0 || y>=n)
			return false;
		return true;
	}
	
	static void show() {
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.print("\n");
		}
		
		System.out.println("---------------------------");
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}
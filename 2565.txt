import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

public class Main {

	static int n, m, k;
	static int[] arr;
	static boolean[] visit;
	static int count;

	static void Init() throws IOException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		n = Integer.parseInt(br.readLine());
		
		int[]dp = new int[n];
		int[][] wire = new int[n][2];
		
		for(int i=0; i<wire.length; i++) {
			st = new StringTokenizer(br.readLine());
			wire[i][0] = Integer.parseInt(st.nextToken());
			wire[i][1] = Integer.parseInt(st.nextToken());
		}
		
		Arrays.sort(wire, new Comparator<int[]>(){
			@Override
			public int compare(int[] o1, int[] o2) {
				return o1[0] - o2[0];
			}
		});
		
		for(int i=0; i<dp.length; i++) {
			dp[i] = 1;
			
			for(int j=0; j<i; j++) {
				if(wire[i][1] > wire[j][1]) {
					dp[i] = Math.max(dp[i], dp[j] +1);
				}
			}
		}
		
		int max = 0;
		for(int i=0; i<n; i++) {
			max = Math.max(max,  dp[i]);
		}
		
		System.out.println(n-max);
	}

	public static void main(String[] args) throws IOException {
		Init();
	}

}

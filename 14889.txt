import java.io.IOException; //백준
import java.math.BigInteger;
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

public class Main {

	static int n, m, k;
	static int[][] arr;
	static int[] brr;
	static boolean[] visit;
	static int min = Integer.MAX_VALUE;

	static void Init() throws IOException {
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		n = Integer.parseInt(br.readLine());
		visit = new boolean[n+1];
		arr = new int[n+1][n+1];
		for(int i=1; i<=n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1; j<=n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		comb(1, 0);
		System.out.print(min);
	}
	
	static void comb(int start, int depth) {
		if(depth == n/2) {
			min = Math.min(min,  g());
			return;
		}
		
		for(int i=start; i<n+1; i++) {
			if(!visit[i]) {
				visit[i] = true;
				comb(i+1, depth+1);
				visit[i] = false;
			}
		}
	}
	
	static int g() {
		int sumstart = 0;
		int sumlink = 0;
		
		for(int i=1; i<=n; i++) {
			for(int j=1; j<=n; j++) {
				if(visit[i] && visit[j])
					sumstart += arr[i][j];
				
				if(!visit[i] && !visit[j])
					sumlink += arr[i][j];
			}
		}
		
		return Math.abs(sumstart - sumlink);
	}

	public static void main(String[] args) throws IOException {
		Init();
	}
}

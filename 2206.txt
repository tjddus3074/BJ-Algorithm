import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;

class Node{
	int x;
	int y;
	int count;
	int drill;
	
	public Node(int x, int y, int count, int drill) {
		this.x = x;
		this.y = y;
		this.count = count;
		this.drill = drill;
	}
}

public class Main{
	
	static int n, m;
	static int[][] arr;
	static int[][] visit;
	static int[] dx = {0, 0, -1, 1};
	static int[] dy = {-1, 1, 0, 0};
	static int count = Integer.MAX_VALUE;

	
	static void Init() throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		arr = new int[n][m];
		visit = new int[n][m];
		
		for(int i=0; i<n; i++) {
			String t = br.readLine();
			for(int j=0; j<m; j++) {
				arr[i][j] = t.charAt(j) - '0';
				visit[i][j] = Integer.MAX_VALUE;
			}
		}
	}
	
	static void bfs() {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(0, 0, 1, 0));
		visit[0][0] = 0;
		
		while(!q.isEmpty()) {
			Node temp = q.poll();
			
			if(temp.x == n-1 && temp.y == m-1) {
				count = temp.count;
				break;
			}
			
			for(int i=0; i<4; i++) {
				int nx = temp.x+dx[i];
				int ny = temp.y+dy[i];
				
				if(!isRange(nx,ny))
					continue;
				
				if(visit[nx][ny] <= temp.drill)
					continue;
				
				if(arr[nx][ny] == 0) {
					visit[nx][ny] = temp.drill;
					q.add(new Node(nx, ny, temp.count+1, temp.drill));
				}
				else if(arr[nx][ny] == 1){
					if(temp.drill == 0) {
						visit[nx][ny] = 1;
						q.add(new Node(nx, ny, temp.count+1, 1));
					}
				}
			}
		}
	}
	
	static boolean isRange(int x, int y) {
		if(x<0 || x>=n || y<0 || y>=m)
			return false;
		return true;
	}
	
	static void info() {
		for(int i=0; i<n; i++) {
			for(int j=0 ;j<m; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.print("\r");
		}
	}
	
	public static void main(String[] args) throws IOException {
		Init();
		bfs();
		if(count == Integer.MAX_VALUE)
			System.out.println(-1);
		else
			System.out.println(count);
	}
}
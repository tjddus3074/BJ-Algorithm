import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;
import java.math.BigInteger;

public class Main {

	static int n, m, k;
	static int[][] arr;
	static int[] brr;
	static int[] dx = {1, -1, 0, 0};
	static int[] dy = {0, 0, 1, -1};
	static Set<Integer> set = new HashSet<>();

	static void Init() throws IOException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		arr = new int[5][5];
		for(int i=0; i<5; i++){
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<5; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		for(int i=0; i<5; i++) {
			for(int j=0; j<5; j++) {
				dfs(100000, i, j, 0);
			}
		}
		
		
		System.out.print(set.size());
	}
	
	static boolean isRange(int x, int y) {
		if(x<0 || x>= 5 || y<0 || y>= 5)
			return false;
		return true;
	}
	
	static void dfs(int count, int x, int y, int sum) {
		if(count == 1) {
			sum += arr[x][y];
			if(!set.contains(sum))
				set.add(sum);
			return;
		}
		
		sum += count * arr[x][y];
		for(int i=0; i<4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if(!isRange(nx, ny))
				continue;
			
			dfs(count/10, nx, ny, sum);
		}
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}
}

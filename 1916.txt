package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node implements Comparable<Node> {
	int end;
	int weight;
	
	public Node(int end, int weight) {
		this.end = end;
		this.weight = weight;
	}
	
	@Override
	public int compareTo(Node o) {
		return weight - o.weight;
	}
}

public class Main {

	static int n, m, k;
	static ArrayList<ArrayList<Node>> a;
	static int[] dist;
	static boolean[] check;
	
	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
//		st = new StringTokenizer(br.readLine());
//		n = Integer.parseInt(st.nextToken());
//		m = Integer.parseInt(st.nextToken());
		
		n = Integer.parseInt(br.readLine());
		m = Integer.parseInt(br.readLine());
		
		a = new ArrayList<>();
		dist = new int[n+1];
		check = new boolean[n+1];
		
		Arrays.fill(dist, Integer.MAX_VALUE);
		
		for(int i=0; i<=n; i++)
			a.add(new ArrayList<>());
		
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			
			a.get(start).add(new Node(end, weight));
		}
		
		st = new StringTokenizer(br.readLine());
		int startPos = Integer.parseInt(st.nextToken());
		int endPos = Integer.parseInt(st.nextToken());
		
		System.out.print(dijkstra(startPos, endPos));
	}
	
	static int dijkstra(int start, int end) {
		PriorityQueue<Node> pq = new PriorityQueue<>();
		boolean[] check = new boolean[n+1];
		pq.offer(new Node(start, 0));
		dist[start] = 0;
		
		while(!pq.isEmpty()) {
			Node curNode = pq.poll();
			int cur = curNode.end;
			
			if(!check[cur]) {
				check[cur] = true;
				
				for(Node node : a.get(cur)){
					if(!check[node.end]&& dist[node.end]> dist[cur] + node.weight) {
						dist[node.end]= dist[cur] + node.weight;
						pq.add(new Node(node.end, dist[node.end]));
					}
				}
			}
		}
		
		return dist[end];
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}
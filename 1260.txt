import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Collections;

public class Main{
	static int n, m, v;
	static boolean[] visit;
	static ArrayList<Integer>[] list;
	
	static void Init() throws IOException {
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		v=  Integer.parseInt(st.nextToken());
		
		list = new ArrayList[n+1];
		for(int i=1; i<n+1; i++) 
			list[i] = new ArrayList<Integer>();
		
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			list[a].add(b);
			list[b].add(a);
		}
		
		for(int i=1; i<n; i++) 
			Collections.sort(list[i]);
		
		visit = new boolean[n+1];
		dfs(v);
		System.out.println();
		
		visit = new boolean[n+1];
		bfs(v);
		System.out.println();
	}
	
	
	static void dfs(int v) {
		if(visit[v])
			return;
		
		visit[v] = true;
		System.out.print(v + " ");
		for(int y : list[v]) {
			if(!visit[y])
				dfs(y);
		}
	}
	
	static void bfs(int v) {
		Queue<Integer> q = new LinkedList<>();
		q.add(v);
		visit[v] = true;
		
		while(!q.isEmpty()) {
			int t = q.poll();
			System.out.print(t + " ");
			for(int y : list[t]) {
				if(!visit[y]) {
					visit[y] = true;
					q.add(y);
				}
			}
		}
	}
	public static void main(String [] args) throws IOException {
		Init();
	}
}

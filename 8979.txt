import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

public class Main {

	static int n, m, k;
	static int max = Integer.MIN_VALUE;

	static void Init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		st = new StringTokenizer(br.readLine());
		k = Integer.parseInt(br.readLine());
		for(int i=0; i<k; i++) {
			int n = Integer.parseInt(br.readLine());
			int m = Integer.parseInt(br.readLine());
			for(int j=0; j<m; j++) {
				st = new StringTokenizer(br.readLine());
				int a, b;
				a = Integer.parseInt(st.nextToken());
				b = Integer.parseInt(st.nextToken());
				n += a*b;
			}
			
			System.out.println(n);
		}
	}

	public static void main(String[] args) throws IOException {
		Init();
	}
}
import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node implements Comparable<Node>{
	int num;
	int g;
	int s;
	int b;
	
	public Node(int num, int g, int s, int b) {
		this.num = num;
		this.g = g;
		this.s = s;
		this.b = b;
	}
	
	public int compareTo(Node o) {
		if(o.g == g) {
			if(o.s == s) {
				return o.b - b;
			}
			return o.s - s;
		}
		else 
			return o.g - g;
	}
}

public class Main {

	static int n, m, k;
	static int[][] arr;
	static int[] brr;

	static void Init() throws IOException {
		BufferedWriter bw= new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		PriorityQueue<Node> q = new PriorityQueue<>();
		Node target = new Node(0, 0, 0, 0);
		arr = new int[m+1][3];
		
		for(int i=1; i<=m; i++) {
			int g, s, b;
			int num;
			st = new StringTokenizer(br.readLine());
			num = Integer.parseInt(st.nextToken());
			g = Integer.parseInt(st.nextToken()); 
			s = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			q.add(new Node(num, g, s, b));
			if(num == n)
				target = new Node(num, g, s, b);
		}
		
		int count = 0;
		while(!q.isEmpty()) {
			Node t = q.poll();
			if(t.num == target.num)continue;
			
			if(t.g>target.g) {
				count++;
				continue;
			}
			else if(t.g == target.g) {
				if(t.s> target.s) {
					count++;
					continue;
				}
				else if(t.s == target.s)
					if(t.b == target.b)continue;
					else if(t.b>target.b) {
						count++;
						continue;
					}
			}
			
		}
		System.out.print(count+1);
	}
	

	public static void main(String[] args) throws IOException {
		Init();
	}
}

import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;

class Node{
	int x;
	int y;
	int drill;
	
	public Node(int x, int y, int d) {
		this.x = x;
		this.y = y;
		this.drill = d;
	}
}

public class Main{
	static int n, m, c;
	static int[][] arr;
	static int[]dx = {-1, 1, 0, 0};
	static int[]dy = {0, 0, -1, 1};
	static int[][] visit;
	
	static void Init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		arr = new int[m][n];
		visit = new int[m][n];
		
		for(int i=0; i<m; i++) {
			String t = br.readLine();
			for(int j=0; j<n; j++) {
				arr[i][j] = t.charAt(j) - '0';
				visit[i][j] = Integer.MAX_VALUE;
			}
		}
	}
	
	static boolean isRange(int x, int y) {
		if(x<0 || x>= m || y<0 || y>=n)
			return false;
		return true;
	}
	
	static void bfs() {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(0, 0, 0));
		visit[0][0] = 0;
		
		while(!q.isEmpty()) {
			Node t = q.poll();
			if(t.x == m && t.y == n)
				continue;
			
			for(int i=0; i<4; i++) {
				int nx = t.x + dx[i];
				int ny = t.y + dy[i];
				int nt = t.drill;
				
				if(!isRange(nx, ny))
					continue;
				if(t.drill >= visit[nx][ny])
					continue;
				
				if(arr[nx][ny] == 1)
					nt++;
				
				visit[nx][ny] = t.drill;
				q.add(new Node(nx, ny, nt));
				
			}
		}
	}
	
	public static void main(String [] args) throws IOException {
		Init();
		bfs();
		
		if(visit[m-1][n-1] == Integer.MAX_VALUE)
			System.out.print(0);
		else
			System.out.print(visit[m-1][n-1]);
	}
}
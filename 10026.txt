import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node{
	int x;
	int y;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main{
	static int n, m;
	static char[][] arr;
	static boolean[][] visit;
	static boolean[][] visit2;
	static int num1 = 0;			//일반
	static int num2 = 0;			//색약
	static int[] dx = {-1, 1, 0, 0};
	static int[] dy = {0, 0, -1, 1};
	
	static void Init() throws IOException {
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		n = Integer.parseInt(br.readLine());
		arr = new char[n][n];
		
		for(int i=0; i<n; i++) {
			String t = br.readLine();
			for(int j=0; j<n; j++) 
				arr[i][j] = t.charAt(j);
		}
		
		visit = new boolean[n][n];
		visit2 = new boolean[n][n];
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++) {
				if(visit[i][j] == false) {
					bfs(i, j);
					num1++;
				}
				if(visit2[i][j] == false) {
					bfs2(i,j);
					num2++;
				}
			}
		}
		
		System.out.print(num1 + " " + num2);
	}
	
	static boolean isRange(int x, int y) {
		if(x<0 || x>=n || y<0 || y>=n)
			return false;
		return true;
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y));
		visit[x][y] = true;
		char c = arr[x][y];
		
		while(!q.isEmpty()) {
			Node t = q.poll();
			for(int i=0; i<4; i++) {
				int nx = t.x+dx[i];
				int ny = t.y + dy[i];
				
				if(!isRange(nx, ny))
					continue;
				if(visit[nx][ny])
					continue;
				
				if(arr[nx][ny] == c) {
					visit[nx][ny] = true;
					q.add(new Node(nx, ny));
				}
			}
		}
	}
	
	static void bfs2(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y));
		visit2[x][y] = true;
		char c = arr[x][y];
		
		while(!q.isEmpty()) {
			Node t = q.poll();
			for(int i=0; i<4; i++) {
				int nx = t.x+dx[i];
				int ny = t.y + dy[i];
				
				if(!isRange(nx, ny))
					continue;
				if(visit2[nx][ny])
					continue;
				
				
				if(c == 'R' || c== 'G')
					if(arr[nx][ny] == 'R' || arr[nx][ny] == 'G') {
						visit2[nx][ny] = true;
						q.add(new Node(nx, ny));
					}
				if (c == 'B')
					if (arr[nx][ny] == c) {
						visit2[nx][ny] = true;
						q.add(new Node(nx, ny));
					}
			}
		}
	}
	
	public static void main(String [] args) throws IOException {
		Init();

	}
}

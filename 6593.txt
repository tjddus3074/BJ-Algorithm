package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node{
	int x;
	int y;
	int z;
	int count;
	
	public Node(int x, int y, int z) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.count = 0;
	}
	
	public Node(int x, int y, int z, int count) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.count = count;
	}
}

public class Main {

	static int n, m, k;
	static int[] dx = {0, 1, 0, -1, 0, 0};
	static int[] dy = {1, 0, -1, 0, 0, 0};
	static int[] dz = {0, 0, 0, 0, 1, -1};
	static char[][][] arr;
	static boolean[][][] visit;
	static int min = Integer.MAX_VALUE;
	
	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		while(true) {
			st = new StringTokenizer(br.readLine());
			k = Integer.parseInt(st.nextToken());
			n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			
			if(n == 0 && m == 0 && k == 0)
				break;
			
			arr = new char[k][n][m];
			visit = new boolean[k][n][m];
			min = Integer.MAX_VALUE;
			
			int x = 0;
			int y = 0;
			int z = 0;
			
			for(int i=0; i<k; i++) {
				for(int j=0; j<n; j++) {
					String t = br.readLine();
					for(int l=0; l<m; l++) {
						char a = t.charAt(l);
						arr[i][j][l] = a;
						if(a == 'S') {
							z = i;
							x = j;
							y = l;
						}
					}
				}
				String temp = br.readLine();
			}
			
			bfs(x, y, z);
			if(min == Integer.MAX_VALUE) {
				System.out.println("Trapped!");
			}
			else {
				System.out.println("Escaped in " + min + " minute(s).");
			}
		}
	}
	
	static boolean isrange(int x, int y, int z) {
		if(x <0 || x>=n || y<0 || y>=m || z<0 || z>=k)
			return false;
		return true;
	}
	
	static void bfs(int x, int y, int z) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y, z));
		visit[z][x][y] = true;
		
		while(!q.isEmpty()) {
			Node o = q.poll();
			if(arr[o.z][o.x][o.y]== 'E' ) {
				min = o.count;
				break;
			}
			
			for(int i=0; i<6; i++) {
				int nx = o.x + dx[i];
				int ny = o.y + dy[i];
				int nz = o.z + dz[i];
				
				if (!isrange(nx, ny, nz))
					continue;
				
				if(visit[nz][nx][ny])
					continue;
				
				if(arr[nz][nx][ny] == '#')
					continue;
				
				visit[nz][nx][ny] = true;
				q.add(new Node(nx, ny, nz, o.count+1));
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}
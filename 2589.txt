package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node{
	int x;
	int y;
	int count =0;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class Main {

	static int n, m, k;
	static char[][] arr;
	static boolean[][] visit;
	static int min = 0;
	static int[] dx = {0, 1, 0, -1};
	static int[] dy = {1, 0, -1, 0};

	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		arr = new char[n][m];
		for(int i=0; i<n; i++) 
			arr[i] = br.readLine().toCharArray();
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				if(arr[i][j] == 'L')
					bfs(i, j);
			}
		}
		System.out.print(min);
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y));
		visit = new boolean[n][m];
		visit[x][y] = true;
		
		while(!q.isEmpty()) {
			Node o = q.poll();
			min = Math.max(min, o.count);
			for(int i=0; i<4; i++) {
				int nx = o.x + dx[i];
				int ny = o.y + dy[i];
				
				if(!isrange(nx, ny))
					continue;
				
				if(arr[nx][ny] == 'W')
					continue;
				
				if(arr[nx][ny] == 'L' && visit[nx][ny])
					continue;
				
				visit[nx][ny] = true;
				Node temp = new Node(nx, ny);
				temp.count = o.count+1;
				q.add(temp);
			}
		}
	}
	
	static boolean isrange(int x, int y) {
		if(x<0 || x>=n || y<0 || y>=m)
			return false;
		return true;
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}

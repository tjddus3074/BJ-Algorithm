package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node{
	int x;
	int y;
	int hcount;
	int mcount;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
		this.hcount = 0;
		this.mcount = 0;
	}
	
	public Node(int x, int y, int hcount, int mcount) {
		this.x = x;
		this.y = y;
		this.mcount = mcount;
		this.hcount = hcount;
	}
}

public class Main {

	static int n, m, k;
	static int[][] arr;
	static boolean[][][] visit;
	static int[] dx = {0, 1, 0, -1};
	static int[] dy = {1, 0, -1, 0};
	static int[] hx = {-2, -1, 1, 2, 2, 1, -1, -2};
	static int[] hy = {1, 2, 2, 1, -1, -2, -2, -1};
	
	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		k = Integer.parseInt(br.readLine());
		st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		
		arr = new int[n][m];
		visit = new boolean[k+1][n][m];
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<m; j++)
				arr[i][j] = Integer.parseInt(st.nextToken());
		}
		
		bfs(0, 0);
	}
	
	static boolean isrange(int x, int y) {
		if(x<0 || x>=n || y<0 || y>=m)
			return false;
		return true;
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y, 0, 0));
		while(!q.isEmpty()) {
			Node o = q.poll();
			
			if(o.x == n-1 && o.y == m-1) {
				System.out.print(o.mcount);
				return;
			}
			
			for(int i=0; i<4; i++) {
				int nx = o.x + dx[i];
				int ny = o.y + dy[i];
				if(!isrange(nx, ny))
					continue;
				
				if(!visit[o.hcount][nx][ny] && arr[nx][ny] != 1) {
					visit[o.hcount][nx][ny] = true;
					q.add(new Node(nx, ny, o.hcount, o.mcount+1));
				}
			}
			
			if(o.hcount+1 <=k) {
				for(int i=0; i<8; i++) {
					int nx = o.x + hx[i];
					int ny = o.y + hy[i];
					if(!isrange(nx, ny))
						continue;
					
					if(!visit[o.hcount+1][nx][ny] && arr[nx][ny] != 1) {
						visit[o.hcount+1][nx][ny] = true;
						q.add(new Node(nx, ny, o.hcount+1, o.mcount+1));
					}
				}
			}
		}
		
		System.out.print(-1);
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}
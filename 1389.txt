package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

public class Main {

	static int n, m, k;
	static int min = Integer.MAX_VALUE;
	static int[][] map;
	static boolean[] visit;
	static int[] total;
	static int ans;
	
	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st; 
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		map = new int[n+1][n+1];;
		total = new int[n+1];
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int n1 = Integer.parseInt(st.nextToken());
			int n2 = Integer.parseInt(st.nextToken());
			map[n1][n2] = 1;
			map[n2][n1] = 1;
		}
		
		for(int i=1; i<=n; i++) {
			for(int j=1; j<=n; j++) {
				visit = new boolean[n+1];
				if(i==j)
					continue;
				
				visit[i] = true;
				total[i] += bfs(i, j);
			}
		}
		
		for(int i=1; i<=n; i++) {
			if(min > total[i]) {
				min = total[i];
				ans = i;
			}
		}
		
		System.out.println(ans);
	}
	
	static int bfs(int x, int y) {
		Queue<Integer> q = new LinkedList<Integer>();
		for(int j=1; j<=n; j++) {
			if(map[x][j] == 1) {
				visit[j] = true;
				q.offer(j);
			}
		}
		
		int cnt = 1;
		while(!q.isEmpty()) {
			int qsize = q.size();
			while(qsize -- >0) {
				int num = q.poll();
				if(num == y)
					return cnt;
				
				for(int j=1; j<=n; j++) {
					if(visit[j] == true || map[num][j] == 0)
						continue;
					visit[j] = true;
					q.offer(j);
				}
			}
			cnt++;
		}
		return 0;
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}

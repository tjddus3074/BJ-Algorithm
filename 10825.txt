import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node implements Comparable<Node>{
	String name;
	int k;
	int e;
	int m;
	public Node(String name, int k, int e, int m) {
		this.name = name;
		this.k = k;
		this.e = e;
		this.m = m;
	}
	
	@Override
	public int compareTo(Node o) {
		if(o.k == k) {
			if(o.e == e) {
				if(o.m == m) {
					int i = 0;
					while(true) {
						if(name.charAt(i) == o.name.charAt(i)) {
							i++;
							continue;
						}
						return name.charAt(i) - o.name.charAt(i);
					}
				}
				return o.m - m;
			}
			return e - o.e;
		}
		return o.k - k;
		
	}
}

public class Main {

	static int n, m, k;
	static int[][] arr;
	static int[] brr;

	static void Init() throws IOException {
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());
		PriorityQueue<Node> q = new PriorityQueue<>();
		n = Integer.parseInt(br.readLine());
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			String name = st.nextToken();
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			q.add(new Node(name, a, b, c));
		}
		
		while(!q.isEmpty()) {
			Node t = q.poll();
			System.out.println(t.name);
		}
	}

	public static void main(String[] args) throws IOException {
		Init();
	}
}

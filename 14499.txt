
import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;

public class Main{
	
	static int n, m, k, x, y;
	static int[] dicenum = new int[6];
	static int[] diceindex = {1, 3, 4, 5, 2, 6}; //diceindxe[5] = 밑 diceindex[0] = 위
	static int[][] map = new int[21][21];
	static int[] order = new int[1002];
	
	static void Init() throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		x = Integer.parseInt(st.nextToken());
		y = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		st = new StringTokenizer(br.readLine());
		for(int i=0; i<k; i++) {
			order[i] = Integer.parseInt(st.nextToken());
		}
	}
	
	static void dice_index_change(int order) {
		int temp = diceindex[0];
		switch(order) {
		case 1:		//동
			diceindex[0] = diceindex[2];
			diceindex[2] = diceindex[5];
			diceindex[5] = diceindex[1];
			diceindex[1] = temp;
			break;
		case 2:		//서
			diceindex[0] = diceindex[1];
			diceindex[1] = diceindex[5];
			diceindex[5] = diceindex[2];
			diceindex[2] = temp;
			break;
		case 3:		//남
			diceindex[0] = diceindex[4];
			diceindex[4] = diceindex[5];
			diceindex[5] = diceindex[3];
			diceindex[3] = temp;
			break;
		case 4: 	// 북
			diceindex[0] = diceindex[3];
			diceindex[3] = diceindex[5];
			diceindex[5] = diceindex[4];
			diceindex[4] = temp;
			break;
		default:
			break;
		}
	}
	
	static int position_change(int order) {
		int flag = 0;
		switch(order) {
		case 1:
			if(y+1<m) {
				y = y+1;
				flag =1;
			}
			break;
		case 2:
			if(y-1>=0) {
				y = y-1;
				flag = 1;
			}
			break;
		case 3:
			if(x-1>=0) {
				x = x-1;
				flag = 1;
			}
			break;
		case 4:
			if(x+1 <n) {
				x= x+1;
				flag = 1;
			}
			break;
			default:
				break;
		}
		return flag;
	}
	
	static int play(int order) {
		if(position_change(order) == 0)
			return -1;
		
		dice_index_change(order);
		
		if(map[x][y] == 0)
			map[x][y] = dicenum[diceindex[5]-1];
		else {
			dicenum[diceindex[5]-1] = map[x][y];
			map[x][y] = 0;
		}
		return 1;
	}
	
	public static void main(String[] args) throws IOException {
		Init();
		
		for(int i=0; i<k; i++) {
			if(play(order[i])==1)
				System.out.println(dicenum[diceindex[0]-1]);
		}
	}
}
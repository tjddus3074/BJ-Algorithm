import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

public class Main {
	
	static int n;
	static int a, b;
	static int m;
	static int count = Integer.MAX_VALUE;
	static boolean visit[];
	static List<List<Integer>> list = new ArrayList<>();
	
	static void Init() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		n = Integer.parseInt(br.readLine());
		visit = new boolean[n+1];
		for(int i=0; i<=n; i++) 
			list.add(new ArrayList<>());
		
		st = new StringTokenizer(br.readLine());
		a = Integer.parseInt(st.nextToken());
		b = Integer.parseInt(st.nextToken());
		
		m = Integer.parseInt(br.readLine());
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int c, d;
			c = Integer.parseInt(st.nextToken());
			d = Integer.parseInt(st.nextToken());
			list.get(c).add(d);
			list.get(d).add(c);
		}
		
		visit[a] = true;
		
		dfs(a, 1);
		
		if(count == Integer.MAX_VALUE)
			System.out.println(-1);
		else
			System.out.println(count);
	}
	
	static void dfs(int num, int c) {
		int size = list.get(num).size();
		for(int i=0; i<size; i++) {
			if(list.get(num).get(i) == b)
				count = Math.min(count,c);
			
			if(visit[list.get(num).get(i)])
				continue;
			
			visit[list.get(num).get(i)] = true;
			dfs(list.get(num).get(i), c+1);
		}
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}
}

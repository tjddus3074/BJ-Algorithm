package studyjavapackage;

import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node{
	int x;
	int y;
	int m;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
	
	public Node(int x, int y, int m) {
		this.x = x;
		this.y = y;
		this.m = m;
	}
}

public class Main {

	static int n, m, k;
	static int[][] arr;
	static int[][] brr;
	static int[] dx = {0, -1, 0, 1, 0};
	static int[] dy = {0, 0, 1, 0, -1};
	static ArrayList<Node> t = new ArrayList<>();
	static ArrayList<Node> list = new ArrayList<>();
	static Queue<Node> q = new LinkedList<>();
	
	static void Init() throws IOException, NumberFormatException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		
		arr = new int[n][m];
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<m; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				if(arr[i][j] == -1)
					t.add(new Node(i, j));
			}
		}
		
		while(k-->0) {
			DirtSpread();
			clean();
		}
		
		int sum = 0;
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				if(arr[i][j] != -1)
					sum += arr[i][j];
			}
		}
		
		System.out.print(sum);
	}
	
	static boolean isrange(int x, int y) {
		if(x<0 || x>=n || y<0 || y>=m)
			return false;
		return true;
	}
	
	static void DirtSpread() {
		qadd();
		list.clear();
		while(!q.isEmpty()) 
			list.add(q.poll());
		
		brr = new int[n][m];
		for(int i=0; i<2; i++) 
			brr[t.get(i).x][t.get(i).y] = -1;
		
		for(int i=0; i<list.size(); i++) {
			Node o = list.get(i);
			int num = 0;
			
			for(int j=1; j<=4; j++) {
				int nx = o.x + dx[j];
				int ny = o.y + dy[j];
				
				if(!isrange(nx, ny))
					continue;
				
				if(brr[nx][ny] == -1)
					continue;
				
				brr[nx][ny] += o.m/5;
				num += o.m/5;
			}
			
			brr[o.x][o.y] += o.m-num; 
		}
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				arr[i][j] = brr[i][j];
			}
		}
	}
	
	static void qadd() {
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				if(arr[i][j] != 0 && arr[i][j] != -1)
					q.add(new Node(i, j, arr[i][j]));
			}
		}
	}
	
	static void clean() {
		int d = 2;
		int ox = t.get(0).x;
		int oy = t.get(0).y + 1;
		brr = new int[n][m];
		boolean[][] visit = new boolean[n][m];
		for(int i=0; i<2; i++) 
			brr[t.get(i).x][t.get(i).y] = -1;
		
		visit[ox][oy] = true;
		while(true) {
			int nx = ox + dx[d];
			int ny = oy + dy[d];
			
			if(!isrange(nx, ny)) {
				d--;
				if(d<1)
					d = 4;
				continue;
			}
			
			if(brr[nx][ny] == -1) {
				break;
			}
			
			visit[nx][ny] = true;
			brr[nx][ny] = arr[ox][oy];
			ox = nx;
			oy = ny;
		}
		
		d = 2;
		ox = t.get(1).x;
		oy = t.get(1).y+1;
		visit[ox][oy] = true;
		
		while(true) {
			int nx = ox + dx[d];
			int ny = oy + dy[d];
			
			if(!isrange(nx,ny)) {
				d++;
				if(d>4)
					d = 1;
				continue;
			}
			
			if(brr[nx][ny] == -1)
				break;
			
			visit[nx][ny] = true;
			brr[nx][ny] = arr[ox][oy];
			ox = nx;
			oy = ny;
		}
		
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				if(visit[i][j])
					arr[i][j] = brr[i][j];
			}
		}
	}
	
	static void show() {
		for(int i=0; i<n; i++) {
			for(int j=0; j<m; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.print("\n");
		}
	}
	
	public static void main(String[] args) throws IOException {
		Init();
	}

}
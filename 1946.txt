import java.io.IOException; //백준
import java.io.*;
import java.util.*;

import java.math.*;

class Node implements Comparable<Node>{
	int a;
	int b;
	
	public Node(int a, int b) {
		this.a = a;
		this.b = b;
	}
	
	@Override
	public int compareTo(Node o) {
		if(a > o.a)return 1;
		else if(a < o.a) return -1;
		else return 0;
	}
}

public class Main {

	static int n, m, k;
	static int[] arr;
	static boolean[] visit;
	static int count;

	static void Init() throws IOException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		k = Integer.parseInt(br.readLine());
		
		while (k-- > 0) {
			ArrayList<Node> list = new ArrayList<>();
			n = Integer.parseInt(br.readLine());
			for(int i=0; i<n; i++) {
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				list.add(new Node(a, b));
			}
			
			Collections.sort(list);
			
			int now = list.get(0).b;
			int count = 1;
			
//			
			for (int i = 1; i < list.size(); i++) {
				if (now == 1)
					break;

				if (list.get(i).b < now) {
					count++;
					now = list.get(i).b;
				}
			}

			System.out.println(count);
		}
			
	}

	public static void main(String[] args) throws IOException {
		Init();
	}

}

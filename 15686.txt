import java.io.IOException; //백준
import java.io.*;
import java.util.*;

//import java.math.*;


class Node implements Comparable<Node>{
	int x;
	int y;
	int distance;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
		this.distance = 0;
	}
	
	@Override
	public int compareTo(Node o) {
		if(this.distance > o.distance)
			return 1;
		else if(this.distance < o.distance)
			return -1;
		else
			return 0;
	}
}

public class Main {

	static int n, m, k;
	static int flag;
	static ArrayList<Node> clist = new ArrayList<>();
	static ArrayList<Node> hlist = new ArrayList<>();
	static int count = Integer.MAX_VALUE;

	static void Init() throws IOException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		int[][] arr = new int[n][n];
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				if(arr[i][j] == 1)
					hlist.add(new Node(i, j));
				else if(arr[i][j] == 2)
					clist.add(new Node(i, j));
			}
		}
		
		ArrayList<Node> temp = new ArrayList<>();
		dfs(0, 0, temp);
		System.out.print(count);
	}
	
	static void dfs(int start ,int cnt, ArrayList<Node> list) {
		if(cnt == m) {
			int sum = 0;
			for(int i=0; i<hlist.size(); i++) {
				Node o = hlist.get(i);
				int minnum = Integer.MAX_VALUE;
				for(int j=0; j<list.size(); j++) {
					Node h = list.get(j);
					int num = distance(o, h);
					minnum = Math.min(minnum, num);
				}
				sum += minnum;
			}
			
			count = Math.min(sum, count);
			return;
		}
		
		if(start >= clist.size())
			return;
		
		ArrayList<Node> N = list;
		
		for(int i=start; i<clist.size(); i++) {
			N.add(clist.get(i));
			dfs(i+1, cnt+1, N);
			for(int j=0; j<N.size(); j++) {
				if(clist.get(i) == N.get(j)) {
					N.remove(j);
					break;
				}
			}
		}
	}
	
	static int distance(Node a, Node b) {
		int num = Math.abs(a.x - b.x)+ Math.abs(a.y - b.y);
		return num; 
	}

	public static void main(String[] args) throws IOException {
		Init();
	}
}

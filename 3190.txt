import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;

class Node{
	int x;
	int y;
	
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

class change{
	int time;
	char direction;
	
	public change(int time, char direction) {
		this.time = time;
		this.direction = direction;
	}
}

public class Main{
	static int n, k, l;
	static int[][] arr;
	static boolean[][] apple;
	static boolean[][] visit;
	static int[] changetime;
	static char[] changedir;
	static int time = 0;
	static int snakedir = 1;
	static int liveflag = 0;			//1이면 죽어서 종료
	static Deque<Node> q = new ArrayDeque();
	static Queue<change> CH = new LinkedList<>();
	
	static void Init() throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		n = Integer.parseInt(br.readLine());
		k = Integer.parseInt(br.readLine());
		arr = new int[n+1][n+1];
		visit = new boolean[n+1][n+1];
		apple = new boolean[n+1][n+1];
		int a,b;
		for(int i=0; i<k; i++) {
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			apple[a][b] = true;
		}
		
		l = Integer.parseInt(br.readLine());
		changetime = new int[l];
		changedir = new char[l];
		int c;
		char d;
		for(int i=0; i<l; i++) {
			String t = br.readLine();
			String[] s = t.split(" ");
			c = Integer.parseInt(s[0]);
			d = s[1].charAt(0);
			CH.add(new change(c, d));
		}
		
		
	}
	
	static boolean isRange(int x, int y) {
		if(x<1 || x>n || y<1 || y>n)
			return false;
		return true;
	}
	
	static void move() {
		int size = q.size();
		Node head = q.peekLast();
		Node rear = q.peek();
		int nx = head.x;
		int ny = head.y;
		time++;
		
		if(snakedir == 1) {
			ny = ny+1;
			if(!isRange(nx, ny) || visit[nx][ny]) {
				liveflag = 1;
				return;
			}
			
			if(apple[nx][ny] == true) {
				q.addLast(new Node(nx, ny));
				visit[nx][ny] = true;
				apple[nx][ny] = false;
			}
			else {
				q.addLast(new Node(nx,ny));
				visit[nx][ny] = true;
				visit[rear.x][rear.y] = false;
				q.remove();
			}
		}
		else if(snakedir == 2) {
			nx = nx+1;
			if(!isRange(nx, ny) || visit[nx][ny]) {
				liveflag = 1;
				return;
			}
			
			if(apple[nx][ny] == true) {
				q.addLast(new Node(nx, ny));
				visit[nx][ny] = true;
				apple[nx][ny] = false;
			}
			else {
				q.addLast(new Node(nx,ny));
				visit[nx][ny] = true;
				visit[rear.x][rear.y] = false;
				q.remove();
			}
			
		}
		else if(snakedir == 3) {
			ny = ny-1;
			if(!isRange(nx, ny) || visit[nx][ny]) {
				liveflag = 1;
				return;
			}
			
			if(apple[nx][ny] == true) {
				q.addLast(new Node(nx, ny));
				visit[nx][ny] = true;
				apple[nx][ny] = false;
			}
			else {
				q.addLast(new Node(nx,ny));
				visit[nx][ny] = true;
				visit[rear.x][rear.y] = false;
				q.remove();
			}
		}
		else if(snakedir == 4) {
			nx = nx-1;
			if(!isRange(nx, ny) || visit[nx][ny]) {
				liveflag = 1;
				return;
			}
			
			if(apple[nx][ny] == true) {
				q.addLast(new Node(nx, ny));
				visit[nx][ny] = true;
				apple[nx][ny] = false;
			}
			else {
				q.addLast(new Node(nx,ny));
				visit[nx][ny] = true;
				visit[rear.x][rear.y] = false;
				q.remove();
			}
		}
	}
	
	static void info() {
		for(int i=1 ;i<=n; i++) {
			for(int j=1; j<=n; j++) {
				if(visit[i][j])
					System.out.print(1 + " ");
				else
					System.out.print(0 + " ");
			}
			System.out.print("\r");
		}
		System.out.println(time);
	}
	
	public static void main(String [] args) throws IOException {
		Init();
		q.addLast(new Node(1, 1));
		visit[1][1] = true;
		/*while(!CH.isEmpty()) {
			change temp = CH.peek();
			System.out.println(temp.time + " " + temp.direction);
			CH.poll();
		}*/
		while(true) {
			move();		
			//info();
			if(liveflag == 1)
				break;
			
			if (!CH.isEmpty()) {
				change temp = CH.peek();
				if (time == temp.time) {
					if (temp.direction == 'L') { // 왼쪽
						if (snakedir == 1)
							snakedir = 4;
						else
							snakedir--;
					} else if (temp.direction == 'D') { // 오른쪽
						if (snakedir == 4)
							snakedir = 1;
						else
							snakedir++;
					}
					CH.poll();
				}
			}
		}
		
		System.out.println(time);
	}
}
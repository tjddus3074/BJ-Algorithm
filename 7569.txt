import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;

class Node{
	int x;
	int y;
	int z;
	int count;
	
	public Node(int x, int y, int z, int c) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.count = c;
	}
}

public class Main{
	static int n,m,h;
	static int[][][] arr;
	static int[] dx = {-1, 1, 0, 0, 0, 0};
	static int[] dy = {0, 0, -1, 1, 0, 0};
	static int[] dz = {0, 0, 0, 0, -1, 1};
	static int flag = 1;
	static Queue<Node> q = new LinkedList<>();
	
	static void Init() throws IOException {
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		m = Integer.parseInt(st.nextToken());
		n = Integer.parseInt(st.nextToken());
		h = Integer.parseInt(st.nextToken());
		arr = new int[h][n][m];
		
		for(int i=0; i<h; i++) {
			for(int j=0; j<n; j++) {
				st = new StringTokenizer(br.readLine());
				for(int k=0; k<m; k++) {
					arr[i][j][k] = Integer.parseInt(st.nextToken());
					if(arr[i][j][k] == 0)
						flag = 0;
					if(arr[i][j][k] == 1)
						q.add(new Node(j, k, i, 0));
				}
			}
		}
	}
	
	static boolean isRange(int x, int y, int z) {
		if(x<0 || x>= n || y<0 || y>=m || z<0 || z>=h)
			return false;
		return true;
	}
	
	static void bfs() {
		int cnt = 0;
		
		while(!q.isEmpty()) {
			Node t= q.poll();
			cnt = t.count;
			for(int i=0; i<6; i++) {
				int nx = t.x + dx[i];
				int ny = t.y + dy[i];
				int nz = t.z + dz[i];
				
				if(!isRange(nx,ny,nz))
					continue;
				
				if(arr[nz][nx][ny] == 0) {
					arr[nz][nx][ny] = 1;
					q.add(new Node(nx, ny, nz, t.count+1));
				}
			}
		}
		
		if(check())
			System.out.print(cnt);
		else
			System.out.print(-1);
	}
	
	static boolean check() {
		for(int i=0; i<h; i++) 
			for(int j=0; j<n; j++) 
				for(int k=0; k<m; k++) 
					if(arr[i][j][k] == 0)
						return false;
		return true;
	}
	
	public static void main(String [] args) throws IOException {
		Init();
		if(flag == 1) {
			System.out.println(0);
			return;
		}
		bfs();
	}
}

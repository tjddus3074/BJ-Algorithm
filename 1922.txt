import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

class Node implements Comparable<Node>{
	int start;
	int end;
	int weight;
	
	public Node(int s, int e, int w) {
		this.start = s;
		this.end = e;
		this.weight = w;
	}
	
	@Override
	public int compareTo(Node o) {
		return weight - o.weight;
	}
}

public class Main{
	static int n, m;
	static int[] arr;
	static PriorityQueue<Node> q = new PriorityQueue<>();
	static int result =  0;
	
	static void Init() throws IOException {
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		n = Integer.parseInt(br.readLine());
		m = Integer.parseInt(br.readLine());
		arr = new int[n+1];
		for(int i=1; i<=n; i++) 
			arr[i] = i;
		
		for(int i=0; i<m; i++) {
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			q.add(new Node(s, e, w));
		}
		
		for(int i=0; i<m; i++) {
			Node t = q.poll();
			int a = find(t.start);
			int b = find(t.end);
			
			if(a==b)
				continue;
			
			union(a,b);
			result += t.weight;
		}
		
		System.out.print(result);
	}
	
	static int find(int a) {
		if(a == arr[a]) return a;
		
		arr[a] = find(arr[a]);
		return arr[a];
	}
	
	static void union(int a, int b) {
		int ar = find(a);
		int br = find(b);
		if(ar != br)
			arr[ar] = b;
		else
			return;
	}

	public static void main(String [] args) throws IOException {
		Init();
	}
}

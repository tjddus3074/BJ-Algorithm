import java.io.IOException; //백준
import java.io.*;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;

class Node{
	int x;
	int y;
	int count;
	
	public Node(int x, int y, int count) {
		this.x = x;
		this.y = y;
		this.count = count;
	}
}

public class Main{
	
	static int n;
	static int[][] arr;
	static int sx, sy, ssize, seat;
	static int[] dx = {-1, 1, 0, 0};
	static int[] dy = {0, 0, -1, 1};
	static int momflag = 0;
	static int time = 0;
	
	static void Init() throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		n = Integer.parseInt(br.readLine());
		arr = new int[n][n];
		
		StringTokenizer st;
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				if(arr[i][j] == 9) {
					sx = i;
					sy = j;
					ssize = 2;
					seat = 0;
				}
			}
		}
	}
	
	static boolean isRange(int x, int y) {
		if(x<0 || x>= n || y<0 || y>=n)
			return false;
		return true;
	}
	
	static void bfs(int x, int y) {
		Queue<Node> q = new LinkedList<>();
		q.add(new Node(x, y, 0));
		boolean[][] visit = new boolean[n][n];
		Node eat = new Node(0, 0, Integer.MAX_VALUE);
		int eatflag = 0;
		
		while (!q.isEmpty()) {
			Node t = q.poll();
			visit[t.x][t.y] = true;
			
			for (int i = 0; i < 4; i++) {				
				int nx = t.x + dx[i];
				int ny = t.y + dy[i];
				
				if(!isRange(nx, ny))
					continue;
				if(visit[nx][ny] == true)
					continue;
				if(arr[nx][ny] > ssize) 
					continue;
				
				if(arr[nx][ny] == 0 || arr[nx][ny] == ssize) {
					q.add(new Node(nx,ny, t.count+1));
					visit[nx][ny] = true;
				}
				else if(arr[nx][ny] < ssize && arr[nx][ny] != 0) {
					if(eatflag == 0) {
						eat = new Node(nx, ny, t.count+1);
						eatflag = 1;
					}
					else if(eatflag == 1) {
						if(t.count+1>eat.count) continue;
						
						if(t.count+1 < eat.count)
							eat = new Node(nx, ny, t.count+1);
						else if(t.count+1 == eat.count) {
							if(nx<eat.x)
								eat = new Node(nx, ny, t.count+1);
							else if(nx == eat.x) {
								if(ny<eat.y)
									eat = new Node(nx, ny, t.count+1);
							}
						}
					}
					visit[nx][ny] = true;
				}
				
			}
		}
		
		if(eat.count == Integer.MAX_VALUE) {
			momflag = 1;
			return;
		}
		
		time = time + eat.count;
		arr[sx][sy] = 0;
		sx = eat.x;
		sy = eat.y;
		arr[sx][sy] = 9;
		sharkeat();
		//System.out.println(sx + " " + sy + " " + ssize + " " + seat + "------");
	}
	
	static void sharkeat() {
		seat++;
		if(seat == ssize) {
			ssize++;
			seat = 0;
		}
	}
	
	static void info() {
		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++) {
				System.out.print(arr[i][j] + " ");
			}
			System.out.print("\r");
		}
		System.out.println("----------------------------");
	}
	
	public static void main(String[] args) throws IOException{
		Init();
		while(momflag == 0) {
			bfs(sx, sy);
			//info();
		}
		
		System.out.println(time);
		
	}
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

class Node{
    int x;
    int y;

    public Node(int x, int y){
        this.x = x;
        this.y = y;
    }
}

public class Main {

    static int[][] arr;
    static int[][] visit;
    static int n;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        n = Integer.parseInt(br.readLine());
        arr = new int[n][n];
        visit = new int[n][n];

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        boolean flag = bfs(0,0);
        if(flag)
            System.out.println("HaruHaru");
        else
            System.out.println("Hing");
    }

    static boolean bfs(int x, int y){
        Queue<Node> q = new LinkedList<>();
        visit[0][0] = 1;
        q.add(new Node(x, y));

        while(!q.isEmpty()){
            Node t = q.poll();
            int nx = t.x;
            int ny = t.y;
            int num = arr[nx][ny];
            if(num == -1)
                return true;

            if(isrange(nx+num, ny) && visit[nx+num][ny] == 0){
                q.add(new Node(nx+num, ny));
                visit[nx+num][ny] = 1;
            }

            if(isrange(nx, ny+num) && visit[nx][ny+num] == 0){
                q.add(new Node(nx, ny+num));
                visit[nx][ny+num] = 1;
            }
        }
        return false;
    }

    static boolean isrange(int x, int y){
        if(x<0 || x>=n || y<0 || y>=n )
            return false;
        return true;
    }
}

#include <stdio.h>

int a[100001];
int b[100001];

void mergesort(int a[], int low, int mid, int high) {

	int result[100002];
	int l = low;
	int m = mid + 1;
	int count = 0;

	while (l <= mid && m <= high) {
		if (a[l] <= a[m]) {
			result[count] = a[l];
			l++;
			count++;
		}
		else {
			result[count] = a[m];
			m++;
			count++;
		}
	}

	while (l <= mid) {
		result[count] = a[l];
		l++;
		count++;
	}

	while (m <= high) {
		result[count] = a[m];
		m++;
		count++;
	}

	count--;
	while (count >= 0) {
		a[count + low] = result[count];
		count--;
	}
}

void merge(int a[], int low, int high) {

	int mid = (low + high) / 2;
	
	if (low < high) {
		merge(a, low, mid);
		merge(a, mid + 1, high);
		mergesort(a, low, mid, high);
	}
	else
		return;
}

int search(int low, int high, int findn) {
	int result = 0;
	while (low <= high) {
		int mid = (low + high) / 2;

		if (a[mid] > findn)
			high = mid - 1;
		else if (a[mid] < findn)
			low = mid + 1;
		else if(a[mid] == findn){
			result = 1;
			break;
		}
	}

	return result;
}

int main() {
	int n; scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
	}
	merge(a, 1, n);

	int m; scanf("%d", &m);
	int temp;
	for (int i = 0; i < m; i++) {
		scanf("%d", &b[i]);
	}
	for (int i = 0; i < m; i++) {
		printf("%d\n", search(1, n, b[i]));
	}
}

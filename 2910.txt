import java.io.IOException; //백준
import java.io.*;
//import java.util.StringTokenizer;
import java.util.*;

import java.util.Map.Entry;

class Node implements Comparable <Node>{
	int num;
	int appear;
	int count;
	
	public Node(int num, int appear, int count) {
		this.num = num;
		this.appear = appear;
		this.count = count;
	}
	
	@Override
	public int compareTo(Node n) {
		if(this.count != n.count) {
			return n.count - this.count;
		}
		return this.appear - n.appear;
	}
}

class info{
	int appear;
	int count;
	public info(int appear, int count) {
		this.appear = appear;
		this.count = count;
	}
}

public class Main {

	static int n, m, k;
	static HashMap<Integer, info> hm = new HashMap<>();
	static PriorityQueue<Node> pq = new PriorityQueue<>();

	static void Init() throws IOException {
//		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
//		Scanner sc = new Scanner(System.in);
//		st = new StringTokenizer(br.readLine());
//		Integer.parseInt(st.nextToken());

		// char a = 'a'; 97
		// char A = 'A'; 65
		// char z = 'z'; 122
		
		StringBuilder sb = new StringBuilder();
		
		st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine());
		for(int i=0; i<n; i++) {
			int num = Integer.parseInt(st.nextToken());
			if(hm.containsKey(num)) {
				hm.put(num, new info(hm.get(num).appear, hm.get(num).count+1));
			}
			else {
				hm.put(num, new info(i, 1));
			}
		}
		
		
		for(Entry<Integer, info> e : hm.entrySet()) {
			pq.add(new Node(e.getKey(), e.getValue().appear, e.getValue().count));
		}
		
		while(!pq.isEmpty()) {
			Node n = pq.poll();
			for(int i=0; i<n.count; i++) {
				sb.append(n.num + " ");
			}
		}
		System.out.println(sb.toString());
	}

	public static void main(String[] args) throws IOException {
		Init();
	}
}
